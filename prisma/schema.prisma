generator client {
  provider = "prisma-client-js"
}

// Blueprint for recurring class series
model ClassSeries {
  seriesId             String    @id @map("series_id")
  // Default assignments
  branchId             String?   @map("branch_id")
  teacherId            String?   @map("teacher_id")
  studentId            String?   @map("student_id")
  subjectId            String?   @map("subject_id")
  classTypeId          String?   @map("class_type_id")
  boothId              String?   @map("booth_id")
  // Cadence & scope
  startDate            DateTime  @map("start_date") @db.Date
  endDate              DateTime? @map("end_date") @db.Date
  startTime            DateTime  @map("start_time") @db.Time(6)
  endTime              DateTime  @map("end_time") @db.Time(6)
  duration             Int? // minutes
  daysOfWeek           Json      @map("days_of_week") // e.g. [1,3,5]
  // Lifecycle & automation
  status               String    @default("ACTIVE")
  lastGeneratedThrough DateTime? @map("last_generated_through") @db.Date
  notes                String?   @db.VarChar(255)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([studentId])
  @@index([teacherId])
  @@index([branchId])
  @@index([classTypeId])
  @@index([status])
  @@map("class_series")
}

// Centralized scheduling configuration (global defaults)
model SchedulingConfig {
  configId                        String   @id @default("GLOBAL") @map("config_id")
  // Which conflicts mark sessions as CONFLICTED
  markTeacherConflict             Boolean  @default(true)  @map("mark_teacher_conflict")
  markStudentConflict             Boolean  @default(true)  @map("mark_student_conflict")
  markBoothConflict               Boolean  @default(true)  @map("mark_booth_conflict")
  markTeacherUnavailable          Boolean  @default(false) @map("mark_teacher_unavailable")
  markStudentUnavailable          Boolean  @default(false) @map("mark_student_unavailable")
  markTeacherWrongTime            Boolean  @default(false) @map("mark_teacher_wrong_time")
  markStudentWrongTime            Boolean  @default(false) @map("mark_student_wrong_time")
  markNoSharedAvailability        Boolean  @default(false) @map("mark_no_shared_availability")
  // Availability allowance knobs
  allowOutsideAvailabilityTeacher Boolean  @default(false) @map("allow_outside_availability_teacher")
  allowOutsideAvailabilityStudent Boolean  @default(false) @map("allow_outside_availability_student")
  generationMonths                Int      @default(1) @map("generation_months")
  createdAt                       DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("scheduling_config")
}

// Optional per-branch overrides (NULL means inherit from global)
model BranchSchedulingConfig {
  branchId                        String   @id @map("branch_id")
  markTeacherConflict             Boolean? @map("mark_teacher_conflict")
  markStudentConflict             Boolean? @map("mark_student_conflict")
  markBoothConflict               Boolean? @map("mark_booth_conflict")
  markTeacherUnavailable          Boolean? @map("mark_teacher_unavailable")
  markStudentUnavailable          Boolean? @map("mark_student_unavailable")
  markTeacherWrongTime            Boolean? @map("mark_teacher_wrong_time")
  markStudentWrongTime            Boolean? @map("mark_student_wrong_time")
  markNoSharedAvailability        Boolean? @map("mark_no_shared_availability")
  allowOutsideAvailabilityTeacher Boolean? @map("allow_outside_availability_teacher")
  allowOutsideAvailabilityStudent Boolean? @map("allow_outside_availability_student")
  generationMonths                Int?     @map("generation_months")
  createdAt                       DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  branch                          Branch   @relation(fields: [branchId], references: [branchId], onDelete: Cascade)

  @@map("branch_scheduling_config")
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Branch {
  branchId             String                @id @default(cuid()) @map("branch_id")
  name                 String                @db.VarChar(100)
  notes                String?               @db.VarChar(255)
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order                Int?                  @map("order")
  booths               Booth[]
  classSessions        ClassSession[]
  lineMessageTemplates LineMessageTemplate[]
  notifications        Notification[]
  userBranches         UserBranch[]
  vacations            Vacation[]
  branchLineChannels   BranchLineChannel[]
  branchSettings       BranchSettings?
  schedulingConfig     BranchSchedulingConfig?
  defaultForUsers      User[]                @relation("UserDefaultBranch")

  @@index([order])
  @@map("branches")
}

model UserBranch {
  userId   String @map("user_id")
  branchId String @map("branch_id")
  branch   Branch @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, branchId])
  @@map("user_branches")
}

model BranchSettings {
  id                     String   @id @default(cuid())
  branchId               String?  @unique @map("branch_id")
  archiveRetentionMonths Int      @default(6) @map("archive_retention_months")
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  branch                 Branch?  @relation(fields: [branchId], references: [branchId], onDelete: Cascade)

  @@index([branchId])
  @@map("branch_settings")
}

model Booth {
  boothId       String         @id @default(cuid()) @map("booth_id")
  branchId      String         @map("branch_id")
  name          String         @db.VarChar(100)
  status        Boolean?       @default(true)
  notes         String?        @db.VarChar(255)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order         Int?           @map("order")
  branch        Branch         @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  classSessions ClassSession[]

  @@index([order])
  @@map("booths")
}

/// *
/// * This model represents individual class sessions, particularly special classes.
/// * It captures date, time, teacher, subject, and booth information for each class.
model ClassSession {
  classId                 String                   @id @default(cuid()) @map("class_id")
  seriesId                String?                  @map("series_id")
  teacherId               String?                  @map("teacher_id")
  studentId               String?                  @map("student_id")
  subjectId               String?                  @map("subject_id")
  classTypeId             String?                  @map("class_type_id")
  boothId                 String?                  @map("booth_id")
  branchId                String?                  @map("branch_id")
  date                    DateTime                 @db.Date
  startTime               DateTime                 @map("start_time") @db.Time(6)
  endTime                 DateTime                 @map("end_time") @db.Time(6)
  duration                Int?                     @map("duration")
  notes                   String?                  @db.VarChar(255)
  // Session lifecycle/status (e.g., CONFIRMED, CONFLICTED)
  status                  String?                  @db.VarChar(20)
  // Cancellation fields
  isCancelled             Boolean                  @default(false) @map("is_cancelled")
  // cancellationReason removed; reason should be kept in notes if needed
  cancelledAt             DateTime?                @map("cancelled_at") @db.Timestamp(6)
  cancelledByUserId       String?                  @map("cancelled_by_user_id")
  createdAt               DateTime                 @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime                 @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  booth                   Booth?                   @relation(fields: [boothId], references: [boothId], onDelete: Restrict)
  branch                  Branch?                  @relation(fields: [branchId], references: [branchId], onDelete: Restrict)
  classType               ClassType?               @relation(fields: [classTypeId], references: [classTypeId], onDelete: Restrict)
  student                 Student?                 @relation(fields: [studentId], references: [studentId], onDelete: Restrict)
  subject                 Subject?                 @relation(fields: [subjectId], references: [subjectId], onDelete: Restrict)
  teacher                 Teacher?                 @relation(fields: [teacherId], references: [teacherId], onDelete: Restrict)
  studentClassEnrollments StudentClassEnrollment[]
  cancelledBy             User?                    @relation(fields: [cancelledByUserId], references: [id])

  // Note: Hard overlaps (teacher/student/booth) are allowed and recorded as CONFLICTED.
  // We intentionally do not enforce a unique constraint on (teacherId, date, startTime, endTime)
  // to permit creating conflicting sessions for review and manual resolution.
  @@index([date])
  @@index([teacherId])
  @@index([branchId])
  @@index([seriesId])
  @@index([isCancelled])
  @@map("class_sessions")
}

/// *
/// * This model defines different types of classes offered by the school.
/// * Now supports hierarchical structure where class types can have parent-child relationships.
model ClassType {
  classTypeId   String         @id @default(cuid()) @map("class_type_id")
  name          String         @db.VarChar(100)
  notes         String?        @db.VarChar(255)
  /// Global filter visibility for class type options
  visibleInFilters Boolean      @default(true) @map("visible_in_filters")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  parentId      String?        @map("parent_id")
  order         Int?           @map("order")
  // Optional unique color identifier for UI highlighting
  color         String?        @unique @db.VarChar(30)
  classSessions ClassSession[]
  parent        ClassType?     @relation("ClassTypeHierarchy", fields: [parentId], references: [classTypeId])
  children      ClassType[]    @relation("ClassTypeHierarchy")

  @@unique([name, parentId])
  @@index([parentId])
  @@index([order])
  @@map("class_types")
}

model Student {
  studentId                String                     @id @default(cuid()) @map("student_id")
  userId                   String                     @unique @map("user_id")
  name                     String                     @db.VarChar(100)
  kanaName                 String?                    @map("kana_name") @db.VarChar(100)
  studentTypeId            String?                    @map("student_type_id") @db.VarChar(50)
  gradeYear                Int?                       @map("grade_year")
  lineId                   String?                    @unique @map("line_id") @db.VarChar(50)
  parentLineId1            String?                    @unique @map("parent_line_id1") @db.VarChar(50)
  notes                    String?                    @db.VarChar(255)
  status                   String                     @default("ACTIVE") @db.VarChar(50)
  createdAt                DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  linkingCode              String?                    @unique @map("linking_code") @db.VarChar(10)
  lineNotificationsEnabled Boolean?                   @default(true) @map("line_notifications_enabled")
  birthDate                DateTime?                  @map("birth_date") @db.Date
  admissionDate            DateTime?                  @map("admission_date") @db.Date
  examCategory             String?                    @map("exam_category") @db.VarChar(50)
  examCategoryType         String?                    @map("exam_category_type") @db.VarChar(50)
  examDate                 DateTime?                  @map("exam_date") @db.Date
  firstChoice              String?                    @map("first_choice") @db.VarChar(255)
  homePhone                String?                    @map("home_phone") @db.VarChar(50)
  parentEmail              String?                    @map("parent_email") @db.VarChar(100)
  parentPhone              String?                    @map("parent_phone") @db.VarChar(50)
  schoolName               String?                    @map("school_name") @db.VarChar(255)
  schoolType               String?                    @map("school_type") @db.VarChar(50)
  secondChoice             String?                    @map("second_choice") @db.VarChar(255)
  studentPhone             String?                    @map("student_phone") @db.VarChar(50)
  lineUserId               String?                    @unique @map("line_user_id") @db.VarChar(50)
  classSessions            ClassSession[]
  contactPhones            ContactPhone[]
  studentClassEnrollments  StudentClassEnrollment[]
  teacherPreferences       StudentTeacherPreference[]
  studentType              StudentType?               @relation(fields: [studentTypeId], references: [studentTypeId])
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  lineLinks                StudentLineLink[]
  contactEmails            ContactEmail[]

  @@index([studentTypeId])
  @@map("students")
}

model ContactPhone {
  id          String    @id @default(cuid())
  studentId   String    @map("student_id")
  phoneType   PhoneType @map("phone_type")
  phoneNumber String    @map("phone_number") @db.VarChar(50)
  notes       String?   @db.VarChar(255)
  order       Int       @default(0)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  student     Student   @relation(fields: [studentId], references: [studentId], onDelete: Cascade)

  @@index([studentId])
  @@index([order])
  @@map("contact_phones")
}

model ContactEmail {
  id        String   @id @default(cuid())
  studentId String   @map("student_id")
  email     String   @db.VarChar(100)
  notes     String?  @db.VarChar(255)
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  student   Student  @relation(fields: [studentId], references: [studentId], onDelete: Cascade)

  @@index([studentId])
  @@index([order])
  @@map("contact_emails")
}

model UserAvailability {
  id        String             @id @default(cuid())
  userId    String             @map("user_id")
  dayOfWeek DayOfWeek?
  date      DateTime?          @db.Date
  startTime DateTime?          @db.Time(6)
  endTime   DateTime?          @db.Time(6)
  fullDay   Boolean?           @default(false)
  type      AvailabilityType
  status    AvailabilityStatus @default(PENDING)
  reason    String?            @db.VarChar(255)
  notes     String?            @db.VarChar(255)
  createdAt DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dayOfWeek, startTime, endTime], name: "unique_regular_time_slot")
  @@unique([userId, date, startTime, endTime], name: "unique_exception_time_slot")
  @@index([userId, type, status], map: "idx_user_type_status")
  @@index([date, status], map: "idx_date_status")
  @@index([dayOfWeek, status], map: "idx_dayofweek_status")
  @@index([userId, dayOfWeek, status], map: "idx_user_dayofweek_status")
  @@index([userId, date, status], map: "idx_user_date_status")
  @@index([userId, type, dayOfWeek, status], map: "idx_user_type_dayofweek_status")
  @@index([userId, type, date, status], map: "idx_user_type_date_status")
  @@index([status, type], map: "idx_status_type")
  @@index([createdAt], map: "idx_created_at")
  @@index([startTime, endTime], map: "idx_time_range")
  @@map("user_availability")
}

/// *
/// * This model defines categories of students, such as elementary, middle, or high school.
/// * Used to group students and relates to the Grade model.
model StudentType {
  studentTypeId String    @id @default(cuid()) @map("student_type_id")
  name          String    @db.VarChar(100)
  maxYears      Int?      @map("max_years")
  description   String?   @db.VarChar(255)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order         Int?      @map("order")
  Student       Student[]

  @@index([order])
  @@map("student_types")
}

/// *
/// * This model tracks which students are enrolled in which class sessions.
/// * It's a junction table connecting students to class sessions with additional metadata.
model StudentClassEnrollment {
  enrollmentId String       @id @default(cuid()) @map("enrollment_id")
  classId      String       @map("class_id")
  studentId    String       @map("student_id")
  status       String?      @db.VarChar(50)
  notes        String?      @db.VarChar(255)
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  classSession ClassSession @relation(fields: [classId], references: [classId], onDelete: Restrict)
  student      Student      @relation(fields: [studentId], references: [studentId], onDelete: Restrict)

  @@unique([classId, studentId])
  @@map("student_class_enrollments")
}

/// *
/// * This model stores comprehensive teacher information.
/// * Central to class scheduling and assignment.
model Teacher {
  teacherId                String                     @id @default(cuid()) @map("teacher_id")
  userId                   String                     @unique @map("user_id")
  name                     String                     @db.VarChar(100)
  kanaName                 String?                    @map("kana_name") @db.VarChar(100)
  email                    String?                    @db.VarChar(100)
  lineId                   String?                    @unique @map("line_id") @db.VarChar(50)
  notes                    String?                    @db.VarChar(255)
  status                   String                     @default("ACTIVE") @db.VarChar(50)
  createdAt                DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  linkingCode              String?                    @unique @map("linking_code") @db.VarChar(10)
  lineNotificationsEnabled Boolean?                   @default(true) @map("line_notifications_enabled")
  birthDate                DateTime?                  @map("birth_date") @db.Date
  phoneNotes               String?                    @map("phone_notes") @db.VarChar(255)
  phoneNumber              String?                    @map("phone_number") @db.VarChar(50)
  lineUserId               String?                    @unique @map("line_user_id") @db.VarChar(50)
  classSessions            ClassSession[]
  studentPreferences       StudentTeacherPreference[]
  contactPhones            TeacherContactPhone[]
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  lineLinks                TeacherLineLink[]
  contactEmails            TeacherContactEmail[]

  @@map("teachers")
}

model TeacherContactPhone {
  id          String   @id @default(cuid())
  teacherId   String   @map("teacher_id")
  phoneNumber String   @map("phone_number") @db.VarChar(50)
  notes       String?  @db.VarChar(255)
  order       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  teacher     Teacher  @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade)

  @@index([teacherId])
  @@index([order])
  @@map("teacher_contact_phones")
}

model TeacherContactEmail {
  id        String   @id @default(cuid())
  teacherId String   @map("teacher_id")
  email     String   @db.VarChar(100)
  notes     String?  @db.VarChar(255)
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  teacher   Teacher  @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade)

  @@index([teacherId])
  @@index([order])
  @@map("teacher_contact_emails")
}

model SubjectType {
  subjectTypeId             String                     @id @default(cuid()) @map("subject_type_id")
  name                      String                     @unique @db.VarChar(100)
  notes                     String?                    @db.VarChar(255)
  createdAt                 DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order                     Int?                       @map("order")
  preferences               UserSubjectPreference[]
  studentTeacherPreferences StudentTeacherPreference[]

  @@index([order])
  @@map("subject_types")
}

model UserSubjectPreference {
  id            String      @id @default(cuid())
  userId        String
  subjectId     String
  subjectTypeId String
  createdAt     DateTime    @default(now())
  subject       Subject     @relation(fields: [subjectId], references: [subjectId], onDelete: Restrict)
  subjectType   SubjectType @relation(fields: [subjectTypeId], references: [subjectTypeId], onDelete: Restrict)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId, subjectTypeId])
  @@index([userId])
  @@index([subjectId])
  @@index([subjectTypeId])
}

model StudentTeacherPreference {
  id            String      @id @default(cuid())
  studentId     String      @map("student_id")
  teacherId     String      @map("teacher_id")
  subjectId     String      @map("subject_id")
  subjectTypeId String      @map("subject_type_id")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  student       Student     @relation(fields: [studentId], references: [studentId], onDelete: Restrict)
  subject       Subject     @relation(fields: [subjectId], references: [subjectId], onDelete: Restrict)
  subjectType   SubjectType @relation(fields: [subjectTypeId], references: [subjectTypeId], onDelete: Restrict)
  teacher       Teacher     @relation(fields: [teacherId], references: [teacherId], onDelete: Restrict)

  @@unique([studentId, teacherId, subjectId, subjectTypeId])
  @@index([studentId])
  @@index([teacherId])
  @@index([subjectId])
  @@index([subjectTypeId])
  @@map("student_teacher_preferences")
}

/// *
/// * This model defines the subjects taught at the school.
/// * This is the core subject entity in the three-tier subject management system.
/// * Made global like StudentType model - not branch-specific.
model Subject {
  subjectId                 String                     @id @default(cuid()) @map("subject_id")
  name                      String                     @unique @db.VarChar(100)
  notes                     String?                    @db.VarChar(255)
  createdAt                 DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  preferences               UserSubjectPreference[]
  classSessions             ClassSession[]
  studentTeacherPreferences StudentTeacherPreference[]

  @@map("subjects")
}

/// *
/// * This model stores notification records for system communications.
/// * Handles message delivery to students and teachers.
model Notification {
  notificationId     String             @id @default(cuid()) @map("notification_id")
  recipientType      String?            @map("recipient_type") @db.VarChar(20)
  recipientId        String?            @map("recipient_id") @db.VarChar(50)
  notificationType   String?            @map("notification_type") @db.VarChar(50)
  templateId         String?            @map("template_id")
  message            String?            @db.Text
  relatedClassId     String?            @map("related_class_id") @db.VarChar(500)
  branchId           String?            @map("branch_id")
  sentVia            String?            @map("sent_via") @db.VarChar(20)
  sentAt             DateTime?          @map("sent_at") @db.Timestamp(6)
  readAt             DateTime?          @map("read_at") @db.Timestamp(6)
  status             NotificationStatus @default(PENDING)
  notes              String?            @db.VarChar(255)
  createdAt          DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  scheduledAt        DateTime           @default(now()) @map("scheduled_at")
  processingAttempts Int                @default(0) @map("processing_attempts")
  logs               Json?
  targetDate         DateTime?          @map("target_date") @db.Date
  branch             Branch?            @relation(fields: [branchId], references: [branchId])

  @@unique([recipientId, recipientType, notificationType, targetDate, branchId], name: "notifications_unique_daily_branch_20250808")
  @@index([branchId])
  @@index([status, scheduledAt])
  @@index([status, createdAt])
  @@index([branchId, status, createdAt])
  @@index([createdAt])
  @@index([targetDate])
  @@index([templateId])
  @@map("notifications")
}

/// *
/// * Archive table for notifications that have been moved from the main notifications table
/// * Used to preserve important notification history while keeping the main table optimized
model NotificationArchive {
  id                     String             @id @default(cuid()) @map("id")
  originalNotificationId String             @map("original_notification_id")
  recipientType          String?            @map("recipient_type") @db.VarChar(20)
  recipientId            String?            @map("recipient_id") @db.VarChar(50)
  notificationType       String?            @map("notification_type") @db.VarChar(50)
  message                String?            @db.Text
  relatedClassId         String?            @map("related_class_id") @db.VarChar(500)
  branchId               String?            @map("branch_id")
  branchName             String?            @map("branch_name") @db.VarChar(100)
  sentVia                String?            @map("sent_via") @db.VarChar(20)
  sentAt                 DateTime?          @map("sent_at") @db.Timestamp(6)
  readAt                 DateTime?          @map("read_at") @db.Timestamp(6)
  status                 NotificationStatus
  notes                  String?            @db.VarChar(255)
  originalCreatedAt      DateTime           @map("original_created_at") @db.Timestamp(6)
  originalUpdatedAt      DateTime           @map("original_updated_at") @db.Timestamp(6)
  scheduledAt            DateTime           @map("scheduled_at") @db.Timestamp(6)
  processingAttempts     Int                @default(0) @map("processing_attempts")
  logs                   Json?
  archivedAt             DateTime           @default(now()) @map("archived_at") @db.Timestamp(6)
  archiveReason          String             @default("CLEANUP_ARCHIVE") @map("archive_reason") @db.VarChar(50)

  @@index([status, archivedAt])
  @@index([branchId, archivedAt])
  @@index([originalCreatedAt])
  @@index([archivedAt])
  @@map("notification_archives")
}

model LineMessageTemplate {
  id                       String   @id @default(cuid()) @map("id")
  name                     String   @db.VarChar(100)
  description              String?  @db.VarChar(255)
  templateType             String   @map("template_type") @db.VarChar(50)
  timingType               String   @default("days") @map("timing_type") @db.VarChar(20)
  timingValue              Int      @map("timing_value")
  timingHour               Int      @default(9) @map("timing_hour") // Hour (0-23) when notification should be sent
  timingMinute             Int      @default(0) @map("timing_minute") // Minute (0-59) when notification should be sent
  content                  String
  variables                Json
  classListItemTemplate    String?  @map("class_list_item_template") @db.Text // Template for each class item
  classListSummaryTemplate String?  @map("class_list_summary_template") @db.Text // Template for summary line
  isActive                 Boolean  @default(true) @map("is_active")
  branchId                 String?  @map("branch_id")
  createdAt                DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  branch                   Branch?  @relation(fields: [branchId], references: [branchId], onDelete: Restrict)

  @@index([branchId])
  @@index([templateType])
  @@index([isActive])
  @@map("line_message_templates")
}

/// *
/// * This model stores holidays, vacations, and other non-class days.
/// * Used for scheduling and availability calculations.
model Vacation {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  notes       String?  @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime
  branchId    String   @map("branch_id")
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order       Int?     @map("order")
  branch      Branch   @relation(fields: [branchId], references: [branchId])

  @@index([branchId])
  @@index([order])
  @@map("vacations")
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?               @map("email_verified")
  image                  String?
  username               String?                 @unique
  passwordHash           String?
  role                   UserRole                @default(STUDENT)
  createdAt              DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt              DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order                  Int?                    @map("order")
  isRestrictedAdmin      Boolean                 @default(false) @map("is_restricted_admin")
  defaultBranchId        String?                 @map("default_branch_id")
  subjectPreferences     UserSubjectPreference[]
  accounts               Account[]
  sessions               Session[]
  student                Student?
  teacher                Teacher?
  availability           UserAvailability[]
  branches               UserBranch[]
  defaultBranch          Branch?                 @relation("UserDefaultBranch", fields: [defaultBranchId], references: [branchId])
  // Reverse relation for ClassSession.cancelledBy
  cancelledClassSessions ClassSession[]
  // Removed per-user class type visibility; global flag on ClassType replaces this

  @@index([order])
  @@index([defaultBranchId])
  @@map("users")
}

// Removed: per-user Class Type visibility preferences. Replaced by global flag on ClassType.

model Archive {
  archiveId        String   @id @default(cuid()) @map("archive_id")
  classId          String   @unique @map("class_id")
  seriesId         String?  @map("series_id")
  teacherName      String?  @map("teacher_name") @db.VarChar(100)
  studentName      String?  @map("student_name") @db.VarChar(100)
  subjectName      String?  @map("subject_name") @db.VarChar(100)
  boothName        String?  @map("booth_name") @db.VarChar(100)
  branchName       String?  @map("branch_name") @db.VarChar(100)
  classTypeName    String?  @map("class_type_name") @db.VarChar(100)
  enrolledStudents Json?    @map("enrolled_students")
  date             DateTime @db.Date
  startTime        DateTime @map("start_time") @db.Time(6)
  endTime          DateTime @map("end_time") @db.Time(6)
  duration         Int?
  notes            String?  @db.VarChar(255)
  archivedAt       DateTime @default(now()) @map("archived_at") @db.Timestamp(6)

  @@map("archives")
}

/// *
/// * Authentication-related model for external provider connections.
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// *
/// * Authentication session management model.
/// * Part of the authentication system.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/// *
/// * Email verification token model for authentication.
/// * Part of the authentication system.
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserStatus {
  ACTIVE
  SICK
  PERMANENTLY_LEFT
}

enum AvailabilityStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AvailabilityType {
  REGULAR
  EXCEPTION
  ABSENCE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

/// *
/// * This model handles user authentication and access control.
/// * Links to both Student and Teacher models for role-based access.
enum UserRole {
  ADMIN
  STAFF
  TEACHER
  STUDENT
}

enum SchoolType {
  PUBLIC
  PRIVATE
}

enum ExamCategory {
  BEGINNER
  ELEMENTARY
  HIGH_SCHOOL
  UNIVERSITY
}

enum ExamCategoryType {
  PUBLIC
  PRIVATE
}

enum PhoneType {
  HOME
  DAD
  MOM
  OTHER
}

enum NotificationStatus {
  PENDING
  PROCESSING
  SENT
  FAILED
}

enum ChannelType {
  UNSPECIFIED
  TEACHER
  STUDENT
}

// Reasons for cancelling a class session
// enum CancellationReason removed

// Account slots for student-linked LINE IDs
enum LineAccountSlot {
  student
  parent
}

/// *
/// * LINE Channel configuration for multi-channel support
/// * Stores encrypted LINE channel credentials
model LineChannel {
  channelId          String              @id @default(cuid()) @map("channel_id")
  name               String              @db.VarChar(100)
  description        String?             @db.VarChar(255)
  channelAccessToken String              @db.Text // Encrypted
  channelSecret      String              @db.Text // Encrypted
  webhookUrl         String?             @map("webhook_url") @db.VarChar(255)
  isActive           Boolean             @default(true) @map("is_active")
  isDefault          Boolean             @default(false) @map("is_default")
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  lastRotatedAt      DateTime?           @map("last_rotated_at") @db.Timestamp(6)
  branchLineChannels BranchLineChannel[]
  teacherLineLinks   TeacherLineLink[]
  studentLineLinks   StudentLineLink[]

  @@index([isActive])
  @@index([isDefault])
  @@map("line_channels")
}

/// *
/// * Junction table linking branches to LINE channels
/// * Supports many-to-many relationship for flexible channel assignment
model BranchLineChannel {
  id          String      @id @default(cuid())
  branchId    String      @map("branch_id")
  channelId   String      @map("channel_id")
  channelType ChannelType @default(UNSPECIFIED) @map("channel_type")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  branch      Branch      @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  lineChannel LineChannel @relation(fields: [channelId], references: [channelId], onDelete: Cascade)

  @@index([branchId])
  @@index([channelId])
  @@index([channelType])
  @@map("branch_line_channels")
}

/// Links a teacher to a specific LINE channel (per-channel linkage)
model TeacherLineLink {
  id         String      @id @default(cuid())
  channelId  String      @map("channel_id")
  teacherId  String      @map("teacher_id")
  lineUserId String      @map("line_user_id") @db.VarChar(50)
  enabled    Boolean     @default(true)
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  channel    LineChannel @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  teacher    Teacher     @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade)

  @@unique([channelId, teacherId])
  @@unique([channelId, lineUserId])
  @@index([teacherId])
  @@index([channelId])
  @@map("teacher_line_links")
}

/// Links a student (per slot) to a specific LINE channel (per-channel linkage)
model StudentLineLink {
  id          String          @id @default(cuid())
  channelId   String          @map("channel_id")
  studentId   String          @map("student_id")
  accountSlot LineAccountSlot @map("account_slot")
  lineUserId  String          @map("line_user_id") @db.VarChar(50)
  enabled     Boolean         @default(true)
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  channel     LineChannel     @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  student     Student         @relation(fields: [studentId], references: [studentId], onDelete: Cascade)

  @@unique([channelId, studentId, accountSlot])
  @@unique([channelId, lineUserId])
  @@index([studentId])
  @@index([channelId])
  @@map("student_line_links")
}
