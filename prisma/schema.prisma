generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Branch {
  branchId      String         @id @default(cuid()) @map("branch_id")
  name          String         @db.VarChar(100)
  notes         String?        @db.VarChar(255)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order         Int?           @map("order")
  booths        Booth[]
  classSessions ClassSession[]
  notifications Notification[]
  userBranches  UserBranch[]
  vacations     Vacation[]

  @@index([order])
  @@map("branches")
}

model UserBranch {
  userId   String @map("user_id")
  branchId String @map("branch_id")
  branch   Branch @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, branchId])
  @@map("user_branches")
}

model Booth {
  boothId       String         @id @default(cuid()) @map("booth_id")
  branchId      String         @map("branch_id")
  name          String         @db.VarChar(100)
  status        Boolean?       @default(true)
  notes         String?        @db.VarChar(255)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order         Int?           @map("order")
  branch        Branch         @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  classSessions ClassSession[]

  @@index([order])
  @@map("booths")
}

/// *
///  * This model represents individual class sessions, particularly special classes.
///  * It captures date, time, teacher, subject, and booth information for each class.
model ClassSession {
  classId                 String                   @id @default(cuid()) @map("class_id")
  seriesId                String?                  @map("series_id")
  teacherId               String?                  @map("teacher_id")
  studentId               String?                  @map("student_id")
  subjectId               String?                  @map("subject_id")
  classTypeId             String?                  @map("class_type_id")
  boothId                 String?                  @map("booth_id")
  branchId                String?                  @map("branch_id")
  date                    DateTime                 @db.Date
  startTime               DateTime                 @map("start_time") @db.Time(6)
  endTime                 DateTime                 @map("end_time") @db.Time(6)
  duration                Int?                     @map("duration")
  notes                   String?                  @db.VarChar(255)
  createdAt               DateTime                 @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime                 @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  booth                   Booth?                   @relation(fields: [boothId], references: [boothId])
  branch                  Branch?                  @relation(fields: [branchId], references: [branchId])
  classType               ClassType?               @relation(fields: [classTypeId], references: [classTypeId])
  student                 Student?                 @relation(fields: [studentId], references: [studentId])
  subject                 Subject?                 @relation(fields: [subjectId], references: [subjectId])
  teacher                 Teacher?                 @relation(fields: [teacherId], references: [teacherId])
  studentClassEnrollments StudentClassEnrollment[]

  @@unique([teacherId, date, startTime, endTime])
  @@index([date])
  @@index([teacherId])
  @@index([branchId])
  @@index([seriesId])
  @@map("class_sessions")
}

/// *
///  * This model defines different types of classes offered by the school.
///  * Now supports hierarchical structure where class types can have parent-child relationships.
model ClassType {
  classTypeId   String         @id @default(cuid()) @map("class_type_id")
  name          String         @db.VarChar(100)
  notes         String?        @db.VarChar(255)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  parentId      String?        @map("parent_id")
  order         Int?           @map("order")
  classSessions ClassSession[]
  parent        ClassType?     @relation("ClassTypeHierarchy", fields: [parentId], references: [classTypeId])
  children      ClassType[]    @relation("ClassTypeHierarchy")

  @@index([parentId])
  @@index([order])
  @@map("class_types")
}

model Student {
  studentId               String                     @id @default(cuid()) @map("student_id")
  userId                  String                     @unique @map("user_id")
  name                    String                     @db.VarChar(100)
  kanaName                String?                    @map("kana_name") @db.VarChar(100)
  studentTypeId           String?                    @map("student_type_id") @db.VarChar(50)
  gradeYear               Int?                       @map("grade_year")
  lineId                  String?                    @unique @map("line_id") @db.VarChar(50)
  notes                   String?                    @db.VarChar(255)
  status                  UserStatus                 @default(ACTIVE)
  createdAt               DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  linkingCode             String?                    @unique @map("linking_code") @db.VarChar(10)
  classSessions           ClassSession[]
  studentClassEnrollments StudentClassEnrollment[]
  teacherPreferences      StudentTeacherPreference[]
  studentType             StudentType?               @relation(fields: [studentTypeId], references: [studentTypeId])
  user                    User                       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([studentTypeId])
  @@map("students")
}

model UserAvailability {
  id        String             @id @default(cuid())
  userId    String             @map("user_id")
  dayOfWeek DayOfWeek?
  date      DateTime?          @db.Date
  startTime DateTime?          @db.Time(6)
  endTime   DateTime?          @db.Time(6)
  fullDay   Boolean?           @default(false)
  type      AvailabilityType
  status    AvailabilityStatus @default(PENDING)
  reason    String?            @db.VarChar(255)
  notes     String?            @db.VarChar(255)
  createdAt DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dayOfWeek, startTime, endTime], name: "unique_regular_time_slot")
  @@unique([userId, date, startTime, endTime], name: "unique_exception_time_slot")
  @@index([userId, type, status], map: "idx_user_type_status")
  @@index([date, status], map: "idx_date_status")
  @@index([dayOfWeek, status], map: "idx_dayofweek_status")
  @@index([userId, dayOfWeek, status], map: "idx_user_dayofweek_status")
  @@index([userId, date, status], map: "idx_user_date_status")
  @@index([userId, type, dayOfWeek, status], map: "idx_user_type_dayofweek_status")
  @@index([userId, type, date, status], map: "idx_user_type_date_status")
  @@index([status, type], map: "idx_status_type")
  @@index([createdAt], map: "idx_created_at")
  @@index([startTime, endTime], map: "idx_time_range")
  @@map("user_availability")
}

/// *
///  * This model defines categories of students, such as elementary, middle, or high school.
///  * Used to group students and relates to the Grade model.
model StudentType {
  studentTypeId String    @id @default(cuid()) @map("student_type_id")
  name          String    @db.VarChar(100)
  maxYears      Int?      @map("max_years")
  description   String?   @db.VarChar(255)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order         Int?      @map("order")
  Student       Student[]

  @@index([order])
  @@map("student_types")
}

/// *
///  * This model tracks which students are enrolled in which class sessions.
///  * It's a junction table connecting students to class sessions with additional metadata.
model StudentClassEnrollment {
  enrollmentId String       @id @default(cuid()) @map("enrollment_id")
  classId      String       @map("class_id")
  studentId    String       @map("student_id")
  status       String?      @db.VarChar(50)
  notes        String?      @db.VarChar(255)
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  classSession ClassSession @relation(fields: [classId], references: [classId], onDelete: Cascade)
  student      Student      @relation(fields: [studentId], references: [studentId], onDelete: Cascade)

  @@unique([classId, studentId])
  @@map("student_class_enrollments")
}

/// *
///  * This model stores comprehensive teacher information.
///  * Central to class scheduling and assignment.
model Teacher {
  teacherId          String                     @id @default(cuid()) @map("teacher_id")
  userId             String                     @unique @map("user_id")
  name               String                     @db.VarChar(100)
  kanaName           String?                    @map("kana_name") @db.VarChar(100)
  email              String?                    @db.VarChar(100)
  lineId             String?                    @unique @map("line_id") @db.VarChar(50)
  notes              String?                    @db.VarChar(255)
  status             UserStatus                 @default(ACTIVE)
  createdAt          DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  linkingCode        String?                    @unique @map("linking_code") @db.VarChar(10)
  classSessions      ClassSession[]
  studentPreferences StudentTeacherPreference[]
  user               User                       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("teachers")
}

model SubjectType {
  subjectTypeId             String                     @id @default(cuid()) @map("subject_type_id")
  name                      String                     @unique @db.VarChar(100)
  notes                     String?                    @db.VarChar(255)
  createdAt                 DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order                     Int?                       @map("order")
  preferences               UserSubjectPreference[]
  studentTeacherPreferences StudentTeacherPreference[]

  @@index([order])
  @@map("subject_types")
}

model UserSubjectPreference {
  id            String      @id @default(cuid())
  userId        String
  subjectId     String
  subjectTypeId String
  createdAt     DateTime    @default(now())
  subject       Subject     @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
  subjectType   SubjectType @relation(fields: [subjectTypeId], references: [subjectTypeId], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId, subjectTypeId])
  @@index([userId])
  @@index([subjectId])
  @@index([subjectTypeId])
}

model StudentTeacherPreference {
  id            String      @id @default(cuid())
  studentId     String      @map("student_id")
  teacherId     String      @map("teacher_id")
  subjectId     String      @map("subject_id")
  subjectTypeId String      @map("subject_type_id")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  student       Student     @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  subject       Subject     @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
  subjectType   SubjectType @relation(fields: [subjectTypeId], references: [subjectTypeId], onDelete: Cascade)
  teacher       Teacher     @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade)

  @@unique([studentId, teacherId, subjectId, subjectTypeId])
  @@index([studentId])
  @@index([teacherId])
  @@index([subjectId])
  @@index([subjectTypeId])
  @@map("student_teacher_preferences")
}

/// *
///  * This model defines the subjects taught at the school.
///  * This is the core subject entity in the three-tier subject management system.
///  * Made global like StudentType model - not branch-specific.
model Subject {
  subjectId                 String                     @id @default(cuid()) @map("subject_id")
  name                      String                     @unique @db.VarChar(100)
  notes                     String?                    @db.VarChar(255)
  createdAt                 DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  preferences               UserSubjectPreference[]
  classSessions             ClassSession[]
  studentTeacherPreferences StudentTeacherPreference[]

  @@map("subjects")
}

/// *
///  * This model stores notification records for system communications.
///  * Handles message delivery to students and teachers.
model Notification {
  notificationId   String    @id @default(cuid()) @map("notification_id")
  recipientType    String?   @map("recipient_type") @db.VarChar(20)
  recipientId      String?   @map("recipient_id") @db.VarChar(50)
  notificationType String?   @map("notification_type") @db.VarChar(50)
  message          String?   @db.VarChar(255)
  relatedClassId   String?   @map("related_class_id") @db.VarChar(50)
  branchId         String?   @map("branch_id")
  sentVia          String?   @map("sent_via") @db.VarChar(20)
  sentAt           DateTime? @map("sent_at") @db.Timestamp(6)
  readAt           DateTime? @map("read_at") @db.Timestamp(6)
  status           String?   @db.VarChar(20)
  notes            String?   @db.VarChar(255)
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  branch           Branch?   @relation(fields: [branchId], references: [branchId])

  @@index([branchId])
  @@map("notifications")
}

/// *
///  * This model stores holidays, vacations, and other non-class days.
///  * Used for scheduling and availability calculations.
model Vacation {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  notes       String?  @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime
  branchId    String?  @map("branch_id")
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order       Int?     @map("order")
  branch      Branch?  @relation(fields: [branchId], references: [branchId])

  @@index([branchId])
  @@index([order])
  @@map("vacations")
}

model User {
  id                 String                  @id @default(cuid())
  name               String?
  email              String?                 @unique
  emailVerified      DateTime?               @map("email_verified")
  image              String?
  username           String?                 @unique
  passwordHash       String?
  role               UserRole                @default(ADMIN)
  createdAt          DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order              Int?                    @map("order")
  isRestrictedAdmin  Boolean                 @default(false) @map("is_restricted_admin")
  subjectPreferences UserSubjectPreference[]
  accounts           Account[]
  sessions           Session[]
  student            Student?
  teacher            Teacher?
  availability       UserAvailability[]
  branches           UserBranch[]

  @@index([order])
  @@map("users")
}

/// *
///  * Authentication-related model for external provider connections.
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// *
///  * Authentication session management model.
///  * Part of the authentication system.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/// *
///  * Email verification token model for authentication.
///  * Part of the authentication system.
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserStatus {
  ACTIVE
  SICK
  PERMANENTLY_LEFT
}

enum AvailabilityStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AvailabilityType {
  REGULAR
  EXCEPTION
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

/// *
///  * This model handles user authentication and access control.
///  * Links to both Student and Teacher models for role-based access.
enum UserRole {
  ADMIN
  STAFF
  TEACHER
  STUDENT
}
