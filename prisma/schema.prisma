generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * Booth -> ブース
 * CSV: 'マスタ情報  ブース'
 * This model stores information about physical booths or rooms used for classes.
 * Maps the ブースID, ブース名, and status fields from the CSV.
 */
model Booth {
  boothId               String                 @id @default(cuid()) @map("booth_id")
  name                  String                 @db.VarChar(100)
  status                Boolean?               @default(true)
  notes                 String?                @db.VarChar(255)
  classSessions         ClassSession[]
  regularClassTemplates RegularClassTemplate[]
  createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("booths")
}

/**
 * Class -> 個別授業スケジュール (特別授業)
 * CSV: '個別授業スケジュール 特別授業'
 * This model represents individual class sessions, particularly special classes.
 * It captures date, time, teacher, subject, and booth information for each class.
 */
model ClassSession {
  classId                 String                   @id @default(cuid()) @map("class_id")
  date                    DateTime?                @db.Date
  startTime               DateTime?                @map("start_time") @db.Time(6)
  endTime                 DateTime?                @map("end_time") @db.Time(6)
  duration                DateTime?                @map("duration") @db.Time(6)
  teacherId               String?                  @map("teacher_id") @db.VarChar(50)
  subjectId               String?                  @map("subject_id") @db.VarChar(50)
  boothId                 String?                  @map("booth_id") @db.VarChar(50)
  classTypeId             String?                  @map("class_type_id") @db.VarChar(50)
  templateId              String?                  @map("template_id") @db.VarChar(50)
  notes                   String?                  @db.VarChar(255)
  booth                   Booth?                   @relation(fields: [boothId], references: [boothId], onDelete: SetNull, onUpdate: Cascade)
  classType               ClassType?               @relation(fields: [classTypeId], references: [classTypeId], onDelete: SetNull, onUpdate: Cascade)
  subject                 Subject?                 @relation(fields: [subjectId], references: [subjectId], onDelete: SetNull, onUpdate: Cascade)
  teacher                 Teacher?                 @relation(fields: [teacherId], references: [teacherId], onDelete: SetNull, onUpdate: Cascade)
  regularClassTemplate    RegularClassTemplate?    @relation(fields: [templateId], references: [templateId], onDelete: SetNull, onUpdate: Cascade) // Added relation
  studentClassEnrollments StudentClassEnrollment[]
  createdAt               DateTime                 @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime                 @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([date])
  @@index([startTime])
  @@index([teacherId])
  @@map("class_sessions")
}

/**
 * ClassType -> 授業タイプ
 * CSV: 'マスタ情報  授業タイプ'
 * This model defines different types of classes offered by the school.
 * Used for categorizing class sessions and student preferences.
 */
model ClassType {
  classTypeId               String                     @id @default(cuid()) @map("class_type_id")
  name                      String                     @db.VarChar(100)
  notes                     String?                    @db.VarChar(255)
  classSessions             ClassSession[]
  studentSpecialPreferences StudentSpecialPreference[]
  createdAt                 DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("class_types")
}

/**
 * Student -> 生徒
 * CSV: 'マスタ情報  生徒'
 * This model stores comprehensive student information including personal details,
 * educational background, contact information, and enrollment data.
 * Central to many relationships throughout the system.
 */
enum SchoolType {
  PUBLIC
  PRIVATE
}

enum examSchoolType {
  ELEMENTARY
  MIDDLE
  HIGH
  UNIVERSITY
  OTHER
}

model Student {
  studentId                  String                      @id @default(cuid()) @map("student_id")
  name                       String                      @db.VarChar(100)
  kanaName                   String?                     @map("kana_name") @db.VarChar(100)
  gradeId                    String?                     @map("grade_id") @db.VarChar(50)
  schoolName                 String?                     @map("school_name") @db.VarChar(100)
  schoolType                 SchoolType?                 @map("school_type")
  examSchoolType             SchoolType?                 @map("exam_school_type")
  examSchoolCategoryType     examSchoolType?             @map("exam_school_category_type")
  firstChoiceSchool          String?                     @map("first_choice_school") @db.VarChar(100)
  secondChoiceSchool         String?                     @map("second_choice_school") @db.VarChar(100)
  enrollmentDate             DateTime?                   @map("enrollment_date") @db.Date
  birthDate                  DateTime?                   @db.Date
  homePhone                  String?                     @map("home_phone") @db.VarChar(20)
  parentMobile               String?                     @map("parent_mobile") @db.VarChar(20)
  studentMobile              String?                     @map("student_mobile") @db.VarChar(20)
  parentEmail                String?                     @map("parent_email") @db.VarChar(100)
  notes                      String?                     @db.VarChar(255)
  courseEnrollments          CourseEnrollment[]
  studentClassEnrollments    StudentClassEnrollment[]
  studentRegularPreferences  StudentRegularPreference[]
  studentSpecialPreferences  StudentSpecialPreference[]
  templateStudentAssignments TemplateStudentAssignment[]
  grade                      Grade?                      @relation(fields: [gradeId], references: [gradeId], onDelete: SetNull, onUpdate: Cascade)
  userId                     String?                     @unique @map("user_id")
  user                       User?                       @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt                  DateTime                    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                  DateTime                    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([gradeId])
  @@index([schoolName])
  @@map("students")
}

/**
 * StudentType -> 学生タイプ
 * CSV: 'マスタ情報  学生タイプ'
 * This model defines categories of students, such as elementary, middle, or high school.
 * Used to group students and relates to the Grade model.
 */
model StudentType {
  studentTypeId String   @id @default(cuid()) @map("student_type_id")
  name          String   @db.VarChar(100)
  description   String?  @db.VarChar(255)
  Grade         Grade[]
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("student_types")
}

/**
 * StudentClassEnrollment
 * This model tracks which students are enrolled in which class sessions.
 * It's a junction table connecting students to class sessions with additional metadata.
 * No direct corresponding CSV, but relates to both student and class session data.
 */
model StudentClassEnrollment {
  enrollmentId String        @id @default(cuid()) @map("enrollment_id")
  classId      String?       @map("class_id") @db.VarChar(50)
  studentId    String?       @map("student_id") @db.VarChar(50)
  status       String?       @db.VarChar(50)
  notes        String?       @db.VarChar(255)
  classSession ClassSession? @relation(fields: [classId], references: [classId], onDelete: Cascade, onUpdate: Cascade)
  student      Student?      @relation(fields: [studentId], references: [studentId], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@unique([classId, studentId])
  @@map("student_class_enrollments")
}

/**
 * StudentRegularPreference
 * CSV: '生徒希望日程（通常授業）'
 * This model stores student preferences for regular class schedules,
 * including preferred day of week, time slots, and subjects.
 */
model StudentRegularPreference {
  preferenceId           String   @id @default(cuid()) @map("preference_id")
  studentId              String?  @map("student_id") @db.VarChar(50)
  subjectId              String?  @map("subject_id") @db.VarChar(50)
  preferredWeekdaysTimes Json?    @map("preferred_weekdays_times")
  preferredSubjects      String[]
  preferredTeachers      String[]
  notes                  String?  @db.VarChar(255)
  student                Student? @relation(fields: [studentId], references: [studentId], onDelete: Cascade, onUpdate: Cascade)
  subject                Subject? @relation(fields: [subjectId], references: [subjectId], onDelete: SetNull, onUpdate: Cascade)
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("student_regular_preferences")
}

/**
 * StudentSpecialPreference
 * CSV: '生徒希望日程（特別授業）'
 * This model captures student preferences for special or one-off classes,
 * including specific dates, times, subjects, and class types.
 */
model StudentSpecialPreference {
  preferenceId String     @id @default(cuid()) @map("preference_id")
  studentId    String?    @map("student_id") @db.VarChar(50)
  classTypeId  String?    @map("class_type_id") @db.VarChar(50)
  subjectId    String?    @map("subject_id") @db.VarChar(50)
  date         DateTime?  @db.Date
  startTime    DateTime?  @map("start_time") @db.Time(6)
  endTime      DateTime?  @map("end_time") @db.Time(6)
  notes        String?    @db.VarChar(255)
  classType    ClassType? @relation(fields: [classTypeId], references: [classTypeId], onDelete: SetNull, onUpdate: Cascade)
  student      Student?   @relation(fields: [studentId], references: [studentId], onDelete: Cascade, onUpdate: Cascade)
  subject      Subject?   @relation(fields: [subjectId], references: [subjectId], onDelete: SetNull, onUpdate: Cascade)
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("student_special_preferences")
}

/**
 * TemplateStudentAssignment
 * This junction model links students to regular class templates,
 * defining which students are assigned to which recurring class templates.
 * Works with RegularClassTemplate and Student models to establish recurring schedules.
 */
model TemplateStudentAssignment {
  assignmentId         String                @id @default(cuid()) @map("assignment_id")
  templateId           String?               @map("template_id") @db.VarChar(50)
  studentId            String?               @map("student_id") @db.VarChar(50)
  notes                String?               @db.VarChar(255)
  student              Student?              @relation(fields: [studentId], references: [studentId], onDelete: Cascade, onUpdate: Cascade)
  regularClassTemplate RegularClassTemplate? @relation(fields: [templateId], references: [templateId], onDelete: Cascade, onUpdate: Cascade)
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("template_student_assignments")
}

/**
 * RegularClassTemplate
 * CSV: '通常授業日程テンプレート'
 * This model defines recurring class templates with fixed day of week, time,
 * teacher, subject, and booth. Used to generate regular class schedules.
 */
model RegularClassTemplate {
  templateId                 String                      @id @default(cuid()) @map("template_id")
  dayOfWeek                  String?                     @map("day_of_week") @db.VarChar(20)
  subjectId                  String?                     @map("subject_id") @db.VarChar(50)
  boothId                    String?                     @map("booth_id") @db.VarChar(50)
  teacherId                  String?                     @map("teacher_id") @db.VarChar(50)
  startTime                  DateTime?                   @map("start_time") @db.Time(6)
  endTime                    DateTime?                   @map("end_time") @db.Time(6)
  startDate                  DateTime?                   @map("start_date") @db.Date
  endDate                    DateTime?                   @map("end_date") @db.Date
  notes                      String?                     @db.VarChar(255)
  booth                      Booth?                      @relation(fields: [boothId], references: [boothId], onDelete: SetNull, onUpdate: Cascade)
  subject                    Subject?                    @relation(fields: [subjectId], references: [subjectId], onDelete: SetNull, onUpdate: Cascade)
  teacher                    Teacher?                    @relation(fields: [teacherId], references: [teacherId], onDelete: SetNull, onUpdate: Cascade)
  templateStudentAssignments TemplateStudentAssignment[]
  classSessions              ClassSession[]
  createdAt                  DateTime                    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                  DateTime                    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("regular_class_templates")
}

/**
 * TeacherRegularShift
 * CSV: '講師シフト（通常授業）'
 * This model tracks when teachers are available for regular classes on a weekly basis.
 * Contains day of week and time slot information for teacher availability.
 */
model TeacherRegularShift {
  shiftId   String    @id @default(cuid()) @map("shift_id")
  teacherId String?   @map("teacher_id") @db.VarChar(50)
  dayOfWeek String?   @map("day_of_week") @db.VarChar(20)
  startTime DateTime? @map("start_time") @db.Time(6)
  endTime   DateTime? @map("end_time") @db.Time(6)
  notes     String?   @db.VarChar(255)
  teacher   Teacher?  @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("teacher_regular_shifts")
}

/**
 * TeacherSpecialShift
 * CSV: '講師シフト（特別授業）'
 * This model records one-off availability for teachers on specific dates,
 * used for planning special classes or courses during vacation periods.
 */
model TeacherSpecialShift {
  shiftId   String    @id @default(cuid()) @map("shift_id")
  teacherId String?   @map("teacher_id") @db.VarChar(50)
  date      DateTime? @db.Date
  startTime DateTime? @map("start_time") @db.Time(6)
  endTime   DateTime? @map("end_time") @db.Time(6)
  notes     String?   @db.VarChar(255)
  teacher   Teacher?  @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("teacher_special_shifts")
}

/**
 * TeacherSubject
 * CSV: 'マスタ情報  講師対応科目'
 * This junction model maps which subjects each teacher can teach.
 * Essential for scheduling and teacher assignment to classes.
 */
model TeacherSubject {
  teacherId String   @map("teacher_id") @db.VarChar(50)
  subjectId String   @map("subject_id") @db.VarChar(50)
  notes     String?  @db.VarChar(255)
  subject   Subject  @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade, onUpdate: Cascade)
  teacher   Teacher  @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@id([teacherId, subjectId])
  @@map("teacher_subjects")
}

/**
 * Teacher -> 講師
 * CSV: 'マスタ情報  講師'
 * This model stores comprehensive teacher information including personal details,
 * educational background, contact information, and certification data.
 * Central to class scheduling and assignment.
 */
model Teacher {
  teacherId             String                 @id @default(cuid()) @map("teacher_id")
  name                  String                 @db.VarChar(100)
  evaluationId          String?                @map("evaluation_id") @db.VarChar(50)
  birthDate             DateTime?              @map("birth_date") @db.Date
  mobileNumber          String?                @map("mobile_number") @db.VarChar(20)
  email                 String?                @db.VarChar(100)
  highSchool            String?                @map("high_school") @db.VarChar(100)
  university            String?                @db.VarChar(100)
  faculty               String?                @db.VarChar(100)
  department            String?                @db.VarChar(100)
  enrollmentStatus      String?                @map("enrollment_status") @db.VarChar(50)
  otherUniversities     String?                @map("other_universities") @db.VarChar(255)
  englishProficiency    String?                @map("english_proficiency") @db.VarChar(50)
  toeic                 Int?
  toefl                 Int?
  mathCertification     String?                @map("math_certification") @db.VarChar(50)
  kanjiCertification    String?                @map("kanji_certification") @db.VarChar(50)
  otherCertifications   String?                @map("other_certifications") @db.VarChar(255)
  notes                 String?                @db.VarChar(255)
  classSessions         ClassSession[]
  courseAssignments     CourseAssignment[]
  regularClassTemplates RegularClassTemplate[]
  teacherRegularShifts  TeacherRegularShift[]
  teacherSpecialShifts  TeacherSpecialShift[]
  teacherSubjects       TeacherSubject[]
  evaluation            Evaluation?            @relation(fields: [evaluationId], references: [evaluationId], onDelete: SetNull, onUpdate: Cascade)
  userId                String?                @unique @map("user_id")
  user                  User?                  @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("teachers")
}

/**
 * Evaluation -> 評価
 * CSV: 'マスタ情報  評価'
 * This model defines performance evaluation metrics for teachers,
 * storing ratings and evaluation criteria.
 */
model Evaluation {
  evaluationId String    @id @default(cuid()) @map("evaluation_id")
  name         String    @db.VarChar(100)
  score        Int?
  notes        String?   @db.VarChar(255)
  teachers     Teacher[]
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("evaluations")
}

/**
 * SubjectType -> 科目タイプ
 * CSV: 'マスタ情報  科目タイプ'
 * This model categorizes subjects into types (e.g., languages, sciences, humanities).
 * Used to group related subjects.
 */
model SubjectType {
  subjectTypeId String    @id @default(cuid()) @map("subject_type_id")
  name          String    @db.VarChar(100)
  notes         String?   @db.VarChar(255)
  subjects      Subject[]
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("subject_types")
}

/**
 * Subject -> 科目
 * CSV: 'マスタ情報  科目'
 * This model defines the academic subjects taught at the school.
 * Core entity related to classes, preferences, and teacher assignments.
 */
model Subject {
  subjectId                 String                     @id @default(cuid()) @map("subject_id")
  name                      String                     @db.VarChar(100)
  subjectTypeId             String?                    @map("subject_type_id") @db.VarChar(50)
  notes                     String?                    @db.VarChar(255)
  classSessions             ClassSession[]
  intensiveCourses          IntensiveCourse[]
  regularClassTemplates     RegularClassTemplate[]
  studentRegularPreferences StudentRegularPreference[]
  studentSpecialPreferences StudentSpecialPreference[]
  subjectType               SubjectType?               @relation(fields: [subjectTypeId], references: [subjectTypeId], onDelete: SetNull, onUpdate: Cascade)
  teacherSubjects           TeacherSubject[]
  createdAt                 DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("subjects")
}

/**
 * Grade -> 学年
 * CSV: 'マスタ情報  学年'
 * This model defines school grade levels/years.
 * Related to student categorization and course offerings.
 */
model Grade {
  gradeId          String            @id @default(cuid()) @map("grade_id")
  name             String            @db.VarChar(100)
  studentTypeId    String?           @map("student_type_id") @db.VarChar(50)
  gradeYear        Int?
  notes            String?           @db.VarChar(255)
  intensiveCourses IntensiveCourse[]
  students         Student[]
  studentType      StudentType?      @relation(fields: [studentTypeId], references: [studentTypeId], onDelete: SetNull, onUpdate: Cascade)
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("grades")
}

/**
 * IntensiveCourse -> 講習講座
 * CSV: 'マスタ情報  講習講座'
 * This model represents intensive courses offered during vacation periods.
 * Contains information about courses, subjects, target grades, and session types.
 */
enum IntensiveCourseType {
  SUMMER
  SPRING
  WINTER
  AUTUMN
}

model IntensiveCourse {
  courseId          String               @id @map("course_id")
  name              String               @db.VarChar(100)
  subjectId         String?              @map("subject_id") @db.VarChar(50)
  gradeId           String?              @map("grade_id") @db.VarChar(50)
  classDuration     DateTime?            @map("class_duration") @db.Time(6)
  classSessions     String?              @map("class_sessions") @db.VarChar(20)
  sessionType       IntensiveCourseType? @map("session_type")
  courseAssignments CourseAssignment[]
  courseEnrollments CourseEnrollment[]
  grade             Grade?               @relation(fields: [gradeId], references: [gradeId], onDelete: SetNull, onUpdate: Cascade)
  subject           Subject?             @relation(fields: [subjectId], references: [subjectId], onDelete: SetNull, onUpdate: Cascade)
  createdAt         DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("intensive_courses")
}

/**
 * CourseAssignment
 * This junction model assigns teachers to intensive courses.
 * Links teachers to specific intensive courses with status tracking.
 */
model CourseAssignment {
  teacherId       String          @map("teacher_id") @db.VarChar(50)
  courseId        String          @map("course_id") @db.VarChar(50)
  assignmentDate  DateTime?       @map("assignment_date") @db.Date
  status          String?         @db.VarChar(50)
  notes           String?         @db.VarChar(255)
  intensiveCourse IntensiveCourse @relation(fields: [courseId], references: [courseId], onDelete: Cascade, onUpdate: Cascade)
  teacher         Teacher         @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@id([teacherId, courseId])
  @@map("course_assignments")
}

/**
 * CourseEnrollment
 * CSV: 'マスタ情報  生徒受講科目'
 * This junction model tracks student enrollments in intensive courses.
 * Links students to courses with enrollment status tracking.
 */
model CourseEnrollment {
  studentId       String          @map("student_id")
  courseId        String          @map("course_id") @db.VarChar(50)
  enrollmentDate  DateTime?       @map("enrollment_date") @db.Date
  status          String?         @db.VarChar(50)
  notes           String?         @db.VarChar(255)
  intensiveCourse IntensiveCourse @relation(fields: [courseId], references: [courseId], onDelete: Cascade, onUpdate: Cascade)
  student         Student         @relation(fields: [studentId], references: [studentId], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@id([studentId, courseId])
  @@map("course_enrollments")
}

/**
 * Notification -> 通知
 * This model stores notification records for system communications.
 * Handles message delivery to students and teachers.
 * No direct corresponding CSV file.
 */
model Notification {
  notificationId   String    @id @default(cuid()) @map("notification_id")
  recipientType    String?   @map("recipient_type") @db.VarChar(20)
  recipientId      String?   @map("recipient_id") @db.VarChar(50)
  notificationType String?   @map("notification_type") @db.VarChar(50)
  message          String?   @db.VarChar(255)
  relatedClassId   String?   @map("related_class_id") @db.VarChar(50)
  sentVia          String?   @map("sent_via") @db.VarChar(20)
  sentAt           DateTime? @map("sent_at") @db.Timestamp(6)
  readAt           DateTime? @map("read_at") @db.Timestamp(6)
  status           String?   @db.VarChar(20)
  notes            String?   @db.VarChar(255)
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("notifications")
}

/**
 * Event -> 定休日
 * CSV: 'マスタ情報  定休日'
 * This model stores holidays, vacations, and other non-class days.
 * Used for scheduling and availability calculations.
 */
model Event {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  startDate   DateTime
  endDate     DateTime
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("events")
}

/**
 * User -> Authentication and authorization
 * This model handles user authentication and access control.
 * Links to both Student and Teacher models for role-based access.
 * No direct corresponding CSV file.
 */
enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  username     String?  @unique
  passwordHash String?
  role         UserRole @default(ADMIN)
  student      Student?
  teacher      Teacher?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("users")
}

/**
 * Account
 * Authentication-related model for external provider connections.
 * Part of the authentication system, no direct corresponding CSV.
 */
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/**
 * Session
 * Authentication session management model.
 * Part of the authentication system, no direct corresponding CSV.
 */
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/**
 * VerificationToken
 * Email verification token model for authentication.
 * Part of the authentication system, no direct corresponding CSV.
 */
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
